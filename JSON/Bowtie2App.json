{
  "name": "Bowtie2",
  "shortDescription": "Build an index and map",
  "longDescription": "Bowtie2 is an ultrafast and memory-efficient tool for aligning sequencing reads to long reference sequences.",
  "helpURI": "http://bowtie-bio.sourceforge.net/bowtie2/manual.shtml#what-is-bowtie-2",
  "datePublished": "",
  "label": "Bowtie2",
  "author": "Alice Minotto",
  "version": "2.2.6",
  "deploymentSystem": "cyverseUK-Storage2",
  "deploymentPath": "/mnt/data/apps/Bowtie2",
  "executionSystem": "cyverseUK-Batch2",
  "executionType": "CLI",
  "parallelism": "SERIAL",
  "templatePath": "wrapper.sh",
  "testPath": "test.sh",
  "tags": [ "CyverseUK" ],
  "ontology": [ "http://edamontology.org/operation_3198",
  "http://edamontology.org/operation_3561",
  "http://edamontology.org/topic_3308",
  "http://edamontology.org/topic_0102"],
  "inputs": [
    {"id": "reference_in",
    "value": {
      "required": false,
      "visible": true
    },
    "details": {
      "label": "List of files with ref sequences"
    },
    "semantics": {
      "maxCardinality": -1
    }
  },
  {
    "id": "m1",
    "value": {
      "required": false,
      "visible": true
    },
    "details": {
      "label": "Files with #1 mates, paired with #2",
      "description": "Could be gzip'ed (extension: .gz) or bzip2'ed (extension: .bz2)."
    },
    "semantics": {
      "maxCardinality": -1
    }
  },
  {
    "id": "m2",
    "value": {
      "required": false,
      "visible": true
    },
    "details": {
      "label": "Files with #2 mates, paired with #1",
      "description": "Could be gzip'ed (extension: .gz) or bzip2'ed (extension: .bz2)."
    },
    "semantics": {
      "maxCardinality": -1
    }
  },
  {
    "id": "r_file",
    "value": {
      "required": false,
      "visible": true
    },
    "details": {
      "label": "Files with unpaired reads",
      "description": "Could be gzip'ed (extension: .gz) or bzip2'ed (extension: .bz2)."
    },
    "semantics": {
      "maxCardinality": -1
    }
  },
  {
    "id": "index_archive",
    "value": {
      "required": false,
      "visible": true
      },
    "details": {
      "label": "Index archive",
      "description": "if you already have an index you can upload the archive. (tar.gz or .tar)"
      },
    "semantics": {
      "maxCardinality": 1
      }}
    ],

  "parameters": [
    {"id": "b2_index_base",
    "value": {
      "type": "string",
      "visible": true,
      "default": "b2_index"
    },
    "details": {
      "label" : "Index base",
      "description": "write bt2 data to files with this dir/basename"
      }},
    {"id": "fasta_input",
    "value": {
      "type": "flag",
      "visible": true
      },
    "details": {
      "label": "FASTA input",
      "description": "query input files are (multi-)FASTA .fa/.mfa. (Default is FASTQ .fq/.fastq)",
      "showArgument": true,
      "argument": "-f "
      }},
    {"id": "qseq",
    "value": {
      "type": "flag",
      "visible": true
    },
    "details": {
      "label": "Illumina's qseq input",
      "description": "query input files are in Illumina's qses format. (Default is FASTQ .fq/.fastq)",
      "showArgument": true,
      "argument": "--qseq "
      }
    },
    {"id": "raw_input",
    "value": {
      "type": "flag",
      "visible": true
      },
    "details": {
      "label": "Raw input",
      "showArgument": true,
      "argument": "-r "
      }
    },
    {"id": "trim5",
    "value": {
      "type": "number",
      "visible": true,
      "required": false,
      "validator": "^[0-9]*$",
      "default": 0
      },
    "details": {
      "label": "Trim 5'",
      "description": "trim <int> bases from 5'/left end of reads (0)",
      "showArgument": true,
      "argument": "--trim5 "
      }
    },
    {"id": "trim3",
    "value": {
      "type": "number",
      "visible": true,
      "required": false,
      "validator": "^[0-9]*$",
      "default": 0
      },
    "details": {
      "label": "Trim 3'",
      "description": "trim <int> bases from 5'/left end of reads (0)",
      "showArgument": true,
      "argument": "--trim3 "
      }
    },
    {"id": "phred64",
    "value": {
      "type": "flag",
      "visible": true
      },
    "details": {
      "label": "Phred 64",
      "description": "qualities are Phred+64 (default is Phred+33)",
      "showArgument": true,
      "argument": "--phred64 "
      }
    },
    {"id": "intquals",
    "value": {
      "type": "flag",
      "visible": true
      },
    "details": {
      "label": "Integer qualities",
      "description": "qualities enconded as space-delimited integers",
      "showArgument": true,
      "argument": "--int-quals "
      }
    },
    {"id": "preset",
    "value": {
      "type": "enumeration",
      "enumValues": [
        {"--very-fast":"very fast"},
        {"--fast":"fast"},
        {"--sensitive":"sensitive (default)"},
        {"--very-sensitive":"very sensitive"}],
      "visible": true
      },
    "details": {
      "label": "Preset",
      "description": "see manual for parameters explanations. Default is sensitive"
      }
    },
    {"id": "N_opt",
    "value": {
      "type": "string",
      "visible": true,
      "validator": "^(1|0)$"
      },
    "details": {
      "label": "Seed mismatches",
      "description": "max # mismatches in seed alignment; can be 0 or 1 (0)",
      "showArgument": true,
      "argument": "-N "
      }
    },
    {"id": "L_opt",
    "value": {
      "type": "string",
      "visible": true,
      "validator": "^([4-9]|[1-2][0-9]|3[0-1])$"
      },
    "details": {
      "label": "Length seed substrings",
      "description": "length of seed substrings; must be >3, <32 (22)",
      "showArgument": true,
      "argument": "-L "
      }
    },
    {"id": "i_opt",
    "value": {
      "type": "string",
      "visible": true,
      "validator": "^(L|C|S|G),-?\\d+(.\\d+)?,-?\\d+(.\\d+)?$"
      },
    "details": {
      "label": "Interval between seed substrings w/r/t read len (S,1,1.15)",
      "showArgument": true,
      "argument": "-i "
      }
    },
    {"id": "n-ceil",
    "value": {
      "type": "string",
      "visible": true,
      "validator": "^(L|C|S|G),-?\\d+(.\\d+)?,-?\\d+(.\\d+)?$"
      },
    "details": {
      "label": "Func for max # non-A/C/G/Ts permitted in aln (L,0,0.15)",
      "showArgument": true,
      "argument": "--n-ceil "
      }
    },
    {"id": "dpad",
    "value": {
      "type":"string",
      "visible": true,
      "required": false,
      "validator": "^[0-9]+$"
      },
    "details": {
      "label": "include <int> extra chars opn sides of DP table (15)",
      "showArgument": true,
      "argument": "--dpad "
      }
    },
    {"id":"gbar",
    "value": {
      "type": "string",
      "visible": true,
      "required": false,
      "validator": "^[0-9]+$"
    },
    "details": {
      "label": "disallow gaps within <int> nucs of read extremes (4)",
      "showArgument": true,
      "argument": "--gbar "
      }
    },
    {"id": "ignore-quals",
    "value": {
      "type": "flag",
      "visible": true
      },
    "details": {
      "label": "Ignore quality scores",
      "description": "treat all quality values as 30 on Phred scale (off)",
      "showArgument": true,
      "argument": "--ignore-quals "
      }
    },
    {"id": "nofw",
    "value": {
      "type": "flag",
      "visible": true
      },
    "details": {
      "label": "No forward",
      "description": "do not align forward (original) version of read (off)",
      "showArgument": true,
      "argument": "--nofw "
      }
    },
    {"id": "norc",
    "value": {
      "type": "flag",
      "visible": true
      },
    "details": {
      "label": "No reverse-complement",
      "description": "do not align reverse-complement version of read (off)",
      "showArgument": true,
      "argument": "--norc "
      }
    },
    {"id": "no1mm",
    "value": {
      "type": "flag",
      "visible": true
      },
    "details": {
      "label": "No upfront mismatch",
      "description": "do not allow 1 mismatch alignments before attempting to scan for the optimal seed alignments",
      "showArgument": true,
      "argument": "--no-1mm-upfront "
      }
    },
    {"id": "alignment",
    "value": {
      "type": "enumeration",
      "visible": true,
      "enumValues": [
        {"--end-to-end ": "global (default)"},
        {"--local ": "local"}
      ],
      "default": "--end-to-end "
      },
    "details": {
      "label": "Global or local alignment",
      "description": "In global mode entire read must align; no clipping. In local mode ends might be soft clipped."
      }
    },
    {"id": "ma_opt",
    "value": {
      "type": "string",
      "visible": true,
      "validator": "^\\d+$"
      },
    "details": {
      "label": "Match bonus",
      "description": "default: 0 for --end-to-end, 2 for --local",
      "showArgument": true,
      "argument": "--ma "
      }
    },
    {"id": "mp_opt",
    "value": {
      "type": "string",
      "visible": true,
      "validator": "^\\d+$"
      },
    "details": {
      "label": "Max mismatch penalty",
      "description": "lower quality = lower penalty (6)",
      "showArgument": true,
      "argument": "--mp "
      }
    },
    {"id": "np_opt",
    "value": {
      "type": "string",
      "visible": true,
      "validator": "^\\d+$"
      },
    "details": {
      "label": "Penalty for non-A/C/G/T",
      "description": "both in read and ref (1)",
      "showArgument": true,
      "argument": "--np "
      }
    },
    {"id": "rdg_opt",
    "value": {
      "type": "string",
      "visible": true,
      "validator": "^\\d+,\\d+$"
      },
    "details": {
      "label": "Read gap open, extend penalties",
      "description": "default 5,3",
      "showArgument": true,
      "argument": "--rdg "
      }
    },
    {"id": "rfg_opt",
    "value": {
      "type": "string",
      "visible": true,
      "validator": "^\\d+,\\d+$"
      },
    "details": {
      "label": "Reference gap open, extend penalties",
      "description": "default 5,3",
      "showArgument": true,
      "argument": "--rfg "
      }
    },
    {"id": "score-min",
    "value": {
      "type": "string",
      "visible": true,
      "validator":"^((L|C|S|G),-?\\d+(.\\d+)?,-?\\d+(.\\d+)?)$"
      },
    "details": {
      "label": "Min accettable alignment score w/r/t read length",
      "description": "default: G,20,8 for local, L,-0.6,-0.6 for end-to-end",
      "showArgument": true,
      "argument": "--score-min "
      }
    },
    {"id": "report_int",
    "value": {
      "type": "string",
      "visible": true,
      "validator":"^\\d+$"
      },
    "details": {
      "label": "Report up to <int> alignments",
      "description": "default: report best alignment",
      "showArgument": true,
      "argument": "-k "
      }
    },
    {"id": "report_all",
    "value": {
      "type": "flag",
      "visible": true
      },
    "details": {
      "label": "Report all alignments - very slow",
      "description": "default: report best alignment",
      "showArgument": true,
      "argument": "--all "
      }
    },
    {"id": "D_opt",
    "value": {
      "type": "string",
      "visible": true,
      "validator":"^\\d+$"
      },
    "details": {
      "label": "Give up extending after <int> failed in a row (15)",
      "showArgument": true,
      "argument": "-D "
      }
    },
    {"id": "R_opt",
    "value": {
      "type": "string",
      "visible": true,
      "validator":"^\\d+$"
      },
    "details": {
      "label": "For reads with repetitive seeds try <int> sets of seeds (2)",
      "showArgument": true,
      "argument": "-R "
      }
    },
    {"id": "minins",
    "value": {
      "type": "string",
      "visible": true,
      "validator":"^\\d+$"
      },
    "details": {
      "label": "Min fragment length for paired-end (0)",
      "showArgument": true,
      "argument": "--minins "
      }
    },
    {"id": "maxins",
    "value": {
      "type": "string",
      "visible": true,
      "validator":"^\\d+$"
      },
    "details": {
      "label": "Max fragment length for paired-end (500)",
      "showArgument": true,
      "argument": "--maxins "
      }
    },
    {"id": "pe-alignment",
    "value": {
      "type": "enumeration",
      "visible": true,
      "enumValues": [
        {"--fr ": "fw/rev"},
        {"--rf ": "rev/fw"},
        {"--ff ": "fw/fw"}
      ]
      },
    "details": {
      "label": "Mates align:",
      "description": "default is fw/rev"
      }
    },
    {"id": "no-mixed",
    "value": {
      "type": "flag",
      "visible": true
      },
    "details": {
      "label": "Suppres unpaired alignments for paired reads",
      "showArgument": true,
      "argument": "--no-mixed "
      }
    },
    {"id": "no-discordant",
    "value": {
      "type": "flag",
      "visible": true
      },
    "details": {
      "label": "Suppress discordant alignments for paired reads",
      "showArgument": true,
      "argument": "--no-discordant "
      }
    },
    {"id": "no-dovetail",
    "value": {
      "type": "flag",
      "visible": true
      },
    "details": {
      "label": "Not concordant when mates extend past each other",
      "showArgument": true,
      "argument": "--no-dovetail "
      }
    },
    {"id": "no-contain",
    "value": {
      "type": "flag",
      "visible": true
      },
    "details": {
      "label": "Not concordant when one mate alignment contains other",
      "showArgument": true,
      "argument": "--no-contain "
      }
    },
    {"id": "no-overlap",
    "value": {
      "type": "flag",
      "visible": true
      },
    "details": {
      "label": "Not concordant when mates overlap at all",
      "showArgument": true,
      "argument": "--no-overlap "
      }
    },
    {"id": "ungz",
    "value": {
      "type": "flag",
      "visible": true
      },
    "details": {
      "label": "Output unpaired reads that didn't align",
      "showArgument": true,
      "argument": "--un-gz "
      }
    },
    {"id": "algz",
    "value": {
      "type": "flag",
      "visible": true
      },
    "details": {
      "label": "Output unpaired reads that aligned at least once",
      "showArgument": true,
      "argument": "--al-gz "
      }
    },
    {"id": "unconcgz",
    "value": {
      "type": "flag",
      "visible": true
      },
    "details": {
      "label": "Output pairs that didn't align concordantly",
      "showArgument": true,
      "argument": "--un-conc-gz "
      }
    },
    {"id": "alconcgz",
    "value": {
      "type": "flag",
      "visible": true
      },
    "details": {
      "label": "Output pairs that aligned concordantly at least once",
      "showArgument": true,
      "argument": "--al-conc-gz "
      }
    },
    {"id": "met",
    "value": {
      "type": "flag",
      "visible": true
      },
    "details": {
      "label": "Output metrics",
      "showArgument": true,
      "argument": "--met-file "
      }
    },
    {"id": "qc-filter",
    "value": {
      "type": "flag",
      "visible": true
      },
    "details": {
      "label": "Filter out reads that are bad according to QSEQ filter",
      "showArgument": true,
      "argument": "--qc-filter "
      }
    }
]
}
